version: 3.9.{build}
pull_requests:
  do_not_increment_build_number: true
branches:
  only:
  - /release/.*/
skip_non_tags: true
skip_branch_with_pr: true
environment:
  moduleName: EasitGoWebservice
  companyName: Easit AB
  resourceRoot: C:\projects\easitgowebservice
  helpInfoUri: https://github.com/easitab/EasitGoWebservice/tree/main/docs/v3/
  moduleAuthor: Anders Thyrsson
  projectUri: https://github.com/easitab/EasitGoWebservice
  sourceRoot: C:\projects\easitgowebservice\source
  licenseUri: https://github.com/easitab/EasitGoWebservice/blob/development/LICENSE
  moduleRoot: C:\projects\easitgowebservice\EasitGoWebservice
build_script:
- ps: >-
    New-Module -Name "$env:moduleName" -ScriptBlock {
        $modulePath = Join-Path -Path "$env:moduleRoot" -ChildPath "$env:moduleName.psm1"
        $privScripts = Get-ChildItem -Path "$env:sourceRoot\private" -Filter "*.ps1" -Recurse
        $pubScripts = Get-ChildItem -Path "$env:sourceRoot\public" -Filter "*.ps1" -Recurse
        if (!(Test-Path -Path $modulePath)) {
            $newModuleDir = New-Item -Path "$env:resourceRoot" -Name "$env:moduleName" -ItemType 'directory' -Force
            $newModuleFile = New-Item -Path "$env:moduleRoot" -Name "$env:moduleName.psm1" -ItemType "file"
        }
        foreach ($privateScript in $privScripts) {
            $scriptContent = Get-Content -Path "$($privateScript.FullName)" -Raw
            if (Test-Path -Path $modulePath) {
                Add-Content -Path $modulePath -Value $scriptContent
            } else {
                Write-Output "Unable to find modulePath at $modulePath"
            }
        }
        foreach ($publicScript in $pubScripts) {
            $scriptContent = Get-Content -Path "$($publicScript.FullName)" -Raw
            if (Test-Path -Path $modulePath) {
                Add-Content -Path $modulePath -Value $scriptContent
                Add-Content -Path $modulePath -Value "Export-ModuleMember -Function $($publicScript.BaseName)"
            } else {
                Write-Output "Unable to find modulePath at $modulePath"
            }
        }
    } | Out-Null

    $moduleFilePath = Join-Path -Path "$env:moduleRoot" -ChildPath "${env:moduleName}.psm1"

    if (Test-Path -Path "$moduleFilePath") {
        Write-Output "Check for moduleFilePath, OK!"
    }

    else {
        throw "Unable to find $moduleFilePath"
    }

    $manifestFilePath = Join-Path -Path "$env:moduleRoot" -ChildPath "${env:moduleName}.psd1"

    $manifest = @{
        Path              = "$manifestFilePath"
        RootModule        = "$env:moduleName.psm1"
        CompanyName       = "$env:companyName"
        Author            = "$env:moduleAuthor"
        ModuleVersion     = "$env:APPVEYOR_BUILD_VERSION"
        HelpInfoUri       = "$env:helpInfoUri"
        LicenseUri        = "$env:licenseUri"
        ProjectUri        = "$env:projectUri"
        Description       = 'Module to be used with Easit BPS & Easit GO webservice API'
        PowerShellVersion = '7.0'
        Copyright         = "(c) 2022 $env:companyName. All rights reserved."
    }

    New-ModuleManifest @manifest | Out-Null

    if (Test-Path -Path "$manifestFilePath") {
        Write-Output "Check for manifestFilePath, OK!"
    } else {
        throw "Unable to find $manifestFilePath"
    }
test_script:
- ps: >-
    Install-Module Pester -Force

    Invoke-Pester
deploy: off
on_finish:
- ps: >-
    if (Test-ModuleManifest -Path "$manifestFilePath") {
        $moduleRootPath = Resolve-Path "$env:moduleRoot"
        Publish-Module -Path "$moduleRootPath" -NuGetApiKey "$env:galleryPublishingKey" -Tags 'easit','easitgo','easitapi'
        Write-Output "Module published!"
    }
